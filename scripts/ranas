#!/usr/bin/env python3

# Copyright 2017-2022 Yury Gribov
#
# Use of this source code is governed by MIT license that can be
# found in the LICENSE.txt file.

# TODO:
# * redzones (can we instrument them at all?)
# * remove temp. files

"""
A wrapper for as(1) which inserts instrumentation code in pro/epilogues.
"""

import sys
import os
import re
import tempfile

verbose = 0
strict = False
out = sys.stderr

def Note(msg):
  out.write(f'ranas: {msg}\n')

def note(msg):
  if verbose > 1:
    Note(msg)

def Warn(msg):
  out.write(f'ranas: warning: {msg}\n')
  if strict:
    out.write('ranas: aborting...\n')

def warn(msg):
  if verbose > 0:
    Warn(msg)

class RegexCache:
  "A wrapper to avoid creating temporary re.match objects."

  def __init__(self):
    self.last_match = None

  def match(self, p, s):
    self.last_match = p.match(s)
    return self.last_match

  def search(self, p, s):
    self.last_match = p.search(s)
    return self.last_match

  def group(self, n):
    return self.last_match.group(n)

def op_size(s):
  return ( 1 if s == 'b'
    else 2 if s == 'w'
    else 4 if s == 'l'
    else 8 if s == 'q'
    else -1 )

def emit_fill_stack(frame_size, fill_value):
  # Kernel will terminate app for large offsets
  # (see "Accessing the stack below %sp is always a bug"
  # in implementation of __do_page_fault).
  frame_size = min(frame_size, 50 * 1024)
  offset = frame_size + 32  # Just in case
  return [
    '  #APP',

    # "Prologue"
    # Note that we do not use pushes as these
    # seem to puzzle gdb.
    f'  mov %rdi, -{offset + 8}(%rsp)',
    f'  mov %rcx, -{offset + 16}(%rsp)',
    f'  mov %rax, -{offset + 24}(%rsp)',

    # Qword count
    f'  mov ${offset >> 3}, %rcx',

    # Start address
    f'  lea -{offset}(%rsp), %rdi',

    # Fill value
    f'  mov $0x{fill_value:x}{fill_value:x}, %rax',

    # Fill with garbage
    '  cld',
    '  rep stosq',

    # "Epilogue"
    f'  mov -{offset + 8}(%rsp), %rdi',
    f'  mov -{offset + 16}(%rsp), %rcx',
    f'  mov -{offset + 24}(%rsp), %rax',
    '  #NO_APP' ]

def instrument(f, f_out, fill_value, dump):
  note('instrumenting ' + f)

  re_dir = re.compile(r'^\s*\.[a-z]')
  re_section = re.compile(r'^\s*\.(?:section|text|rodata|data|bss)')
  re_dot_label = re.compile(r'^\s*.L')
  re_temp_label = re.compile(r'^\s*[0-9]+:$')
  re_label = re.compile(r'^\s*[a-zA-Z_][a-zA-Z_.0-9]*:$')
  re_insn = re.compile(r'^\s+([a-z][a-z_.0-9]+)(?:\s[^;]*|$)')  # Warn on multi-line asm
  re_ret = re.compile(r'^\s+(rep\s+)?ret$')
  re_fralloc = re.compile(r'^\s+subq\s+\$([0-9]+), %rsp$')
  re_comment = re.compile(r'^\s*#|^\s*$')

  lines = []
  in_text_section = False
  in_inline_asm = False
  in_prologue = False
  prologue_lines = []
  func = None
  frame_size = 0

  ninstrs = nfuns = 0
  nret_instrs = nrets = 0

  # Gas wants signed 32-bit imms
  if fill_value != fill_value & 0xffffffff:
    Warn(f'fill value must be a 32-bit constant: 0x{fill_value:x}')
    fill_value &= 0xffffffff

  cache = RegexCache()

  with open(f, 'r') as f_:
    old_lines = f_.readlines()

  for nline, l in enumerate(old_lines, 1):
    l = l.rstrip('\r\n')

    if in_inline_asm:
      lines.append(l)
      if l == '#NO_APP':
        in_inline_asm = False
    elif in_prologue:
      if re_section.match(l):
        warn(f"{f}:{nline}: abort instrumentation of '{func}' due to missing prologue")
        in_text_section = l.find('.text') != -1
        in_prologue = False
      elif re_dir.match(l) \
          or re_dot_label.match(l) \
          or re_temp_label.match(l) \
          or re_comment.match(l):
        pass
      elif l == '#APP':
        warn(f"{f}:{nline}: abort instrumentation of '{func}' due to inline asm: {l}")
        in_inline_asm = True
        in_prologue = False
      elif cache.match(re_insn, l):
        insn = cache.group(1)
        if insn.startswith('push') and len(insn) > 4:
          op_sz = op_size(insn[4]) if len(insn) > 4 else -1
          if op_sz < 0:
            warn(f"{f}:{nline}: abort instrumentation of '{func}' "
                 f"due to unsafe instruction in prologue: {l}")
            in_prologue = False
          else:
            note(f"{f}:{nline}: found push of {op_sz} bytes in '{func}': {l}")
            frame_size += op_sz
        elif cache.match(re_fralloc, l):
          frame_size += int(cache.group(1))
          note(f"{f}:{nline}: identified frame of '{func}' ({frame_size} bytes): {l}")
          if frame_size & 7:
            Warn(f"{f}:{nline}: abort instrumentation of '{func}' due to unaligned stack: {l}")
          else:
            ninstrs += 1
            lines += emit_fill_stack(frame_size, fill_value)
          in_prologue = False
        elif insn.startswith(('mov', 'nop', 'add', 'sub', 'mul', 'imul',
                              'shr', 'shl', 'sar', 'sal', 'ror', 'and', 'or',
                              'xor', 'pxor', 'por', 'pand', 'bswap', 'not',
                              'neg', 'endbr')):
          pass
        else:
          # Avoid unknown instructions
          if not insn.startswith(('j', 'test', 'ret', 'call', 'cmp', 'lea')) \
              or verbose > 1:  # Do not warn when there's a control-flow insn
            warn(f"{f}:{nline}: abort instrumentation of '{func}' "
                 f"due to unsafe instruction in prologue: {l}")
          in_prologue = False
      elif re_label.match(l):
        func2 = l.rstrip(':')
        warn(f"{f}:{nline}: abort instrumentation of '{func}' "
             f"due to missing prologue (new function is '{func2}')")
        lines += prologue_lines
        lines.append(l)
        func = func2
        prologue_lines = []
        frame_size = 0
        nfuns += 1
        continue
      else:
        warn(f"{f}:{nline}: abort instrumentation of '{func}' due to unexpected statement: {l}")
        in_prologue = False

      if in_prologue:
        prologue_lines.append(l)
      else:
        lines += prologue_lines
        lines.append(l)
        prologue_lines = []
        func = None
    else:
      if re_section.match(l):
        in_text_section = l.find('.text') != -1
      elif re_ret.match(l):
        nrets += 1
        if frame_size:
          lines += emit_fill_stack(frame_size, fill_value)
          nret_instrs += 1
      elif re_dir.match(l) \
          or re_dot_label.match(l) \
          or re_temp_label.match(l) \
          or re_insn.match(l) \
          or re_comment.match(l):
        pass
      elif re_label.match(l):
        if in_text_section:
          in_prologue = True
          func = l.rstrip(':')
          prologue_lines = []
          frame_size = 0
          nfuns += 1
      elif l == '#APP':
        in_inline_asm = True
      else:
        warn(f'{f}:{nline}: unexpected top-level statement: {l}')
      lines.append(l)

  if prologue_lines:
    warn(f"{f}: abort instrumentation of '{func}' due to missing prologue")
    lines += prologue_lines

  if verbose:
    Note(f'{f}: {ninstrs}/{nfuns} prologues instrumented')
    Note(f'{f}: {nret_instrs}/{nrets} epilogues instrumented')

  with open(f_out, 'w') as f_out_:
    for l in lines:
      f_out_.write(l + '\n')

  if dump:
    print(f'Dumping modified {f}:')
    for l in lines:
      print(l)

def main():
  global verbose
  verbose = int(os.getenv('RANAS_VERBOSE', '0'))

  global out
  out_name = os.getenv('RANCC_OUTPUT', None)
  if out_name:
    out = open(out_name, 'a')  # pylint: disable=consider-using-with

  global strict
  strict = bool(os.getenv('RANAS_STRICT', 'False'))

  dump = int(os.getenv('RANAS_DUMP', '0'))
  fill_value = int(os.getenv('RANAS_FILL', '0xcdcdcdcd'), 0)

  argv_string = ' '.join(sys.argv)
  note(f'initial args: {argv_string}')

  args = ['as']
  as_files = []

  for arg in sys.argv[1:]:
    if arg.endswith('.s'):
      new_fd, new_file = tempfile.mkstemp('.s')
      os.close(new_fd)  # Who cares...
      as_files.append((arg, new_file))
      args.append(new_file)
    else:
      args.append(arg)

  if not as_files:
    Warn(f'failed to locate .s files: {argv_string}')

  for old_file, new_file in as_files:
    instrument(old_file, new_file, fill_value, dump)

  out.flush()
  sys.stdout.flush()
  sys.stderr.flush()

  os.execvp(args[0], args)

if __name__ == '__main__':
  main()
